@model CustomerInfoModel
@using Nop.Web.Models.Customer;
@using Nop.Core;
@{
    Layout = "~/Views/Shared/_ColumnsTwo.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.Account").Text);
}
@section left
{
    @Html.Partial("MyAccountNavigation", Model.NavigationModel, new ViewDataDictionary())
}
@if (Model.CountryEnabled && Model.StateProvinceEnabled)
{
    <script type="text/javascript">
        //匹配省市区的关联
        $(function () {
            $("#@Html.FieldIdFor(model => model.StateProvinceId),#@Html.FieldIdFor(model => model.CityId)").change(function () {
                var _jself = $(this);
                var selectedItem = $(this).val();
                var ddlStates;

                if (_jself.attr("id") == "@Html.FieldIdFor(model => model.StateProvinceId)") {
                    ddlStates = $("#@Html.FieldIdFor(model => model.CityId)");
                } else {
                    ddlStates = $("#@Html.FieldIdFor(model => model.DistrictId)");
                }

                var statesProgress = $("#states-loading-progress");
                statesProgress.show();
                $.ajax({
                    cache: false,
                    type: "GET",
                    url: "@(Url.Action("GetAreaByParentId","Country"))",
                    data: { "parentId": selectedItem, "addEmptyStateIfRequired": "true" },
                    success: function (data) {
                        ddlStates.html('');
                        $.each(data, function (id, option) {
                            ddlStates.append($('<option></option>').val(option.id).html(option.name));
                        });
                        ddlStates.val("-1").change();
                        statesProgress.hide();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve states.');
                        ddlStates.val("-1").change();
                        statesProgress.hide();
                    }
                });
            });
        });
    </script>
}
<div class="page account-page customer-info-page">
    <div class="page-title">
        <h1>@T("Account.MyAccount") - @T("Account.CustomerInfo")</h1>
    </div>
    <div class="page-body">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            <div class="message-error">
                @Html.ValidationSummary(true)
            </div>
            <div class="fieldset">
                <div class="title">
                    <strong>@T("Account.YourPersonalDetails")</strong>
                </div>
                <div class="form-fields">
                    @if (Model.GenderEnabled)
                    {
                        <div class="inputs">
                            <label>@T("Account.Fields.Gender"):</label>
                            <div class="gender">
                                @Html.RadioButton("Gender", "M", (Model.Gender == "M"), new { id = "gender-male"})
                                <label class="forcheckbox" for="gender-male">@T("Account.Fields.Gender.Male")</label>
                            </div>
                            <div class="gender">
                                @Html.RadioButton("Gender", "F", (Model.Gender == "F"), new { id = "gender-female" })
                                <label class="forcheckbox" for="gender-female">@T("Account.Fields.Gender.Female")</label>
                            </div>
                        </div>
                    }
                    <div class="inputs">
                        @Html.LabelFor(model => model.FirstName, new { }, ":")
                        @Html.EditorFor(model => model.FirstName)
                        @Html.RequiredHint()
                        @Html.ValidationMessageFor(model => model.FirstName)
                    </div>
                    <div class="inputs">
                        @Html.LabelFor(model => model.LastName, new { }, ":")
                        @Html.EditorFor(model => model.LastName)
                        @Html.RequiredHint()
                        @Html.ValidationMessageFor(model => model.LastName)
                    </div>
                    @*rainChange 修改了出生一直都显示*@
                    <div class="inputs">
                        @Html.LabelFor(model => model.DateOfBirthDay, new { }, ":")
                        @if(null!=Model.DateOfBirthYear)
                        {
                            @(Model.DateOfBirthYear+"-"+Model.DateOfBirthMonth+"-"+Model.DateOfBirthDay)
                        }
                    </div>
                    <div class="inputs">
                        @Html.LabelFor(model => model.Email, new { }, ":")
                        @Html.EditorFor(model => model.Email)
                        @Html.RequiredHint()
                        @Html.ValidationMessageFor(model => model.Email)
                    </div>
                    @if (Model.UsernamesEnabled)
                    {
                        if (Model.AllowUsersToChangeUsernames)
                        {
                        <div class="inputs">
                            @Html.LabelFor(model => model.Username, new { }, ":")
                            @Html.EditorFor(model => model.Username)
                            @Html.RequiredHint()
                            @Html.ValidationMessageFor(model => model.Username)
                            @if (Model.CheckUsernameAvailabilityEnabled)
                            {
                                @Html.Partial("_CheckUsernameAvailability")
                            }
                        </div>
                        }
                        else
                        {
                        <div class="inputs">
                            @Html.LabelFor(model => model.Username, new { }, ":")
                            @Model.Username
                        </div>
                        }
                    }
                    @*rainAdd 增加了身份证*@
                    <div class="inputs">
                        @Html.LabelFor(model => model.IdentityId, new { }, ":")
                        @Html.EditorFor(model => model.IdentityId)
                        @Html.ValidationMessageFor(model => model.IdentityId)
                    </div>
                </div>
            </div>    
                    if (Model.AssociatedExternalAuthRecords.Count > 0)
                    {
            <div class="fieldset">
                <div class="title">
                    <strong>@T("Account.AssociatedExternalAuth")</strong>
                </div>
                <table class="data-table">
                    <colgroup>
                        <col />
                        <col />
                        <col />
                    </colgroup>
                    <thead>
                        <tr>
                            <th class="a-center auth-method-name">
                                @T("Account.AssociatedExternalAuth.AuthMethodName")
                            </th>
                            <th class="a-center email">
                                @T("Account.AssociatedExternalAuth.Email")
                            </th>
                            <th class="a-center external-id">
                                @T("Account.AssociatedExternalAuth.ExternalIdentifier")
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.AssociatedExternalAuthRecords)
                        {
                            <tr>
                                <td class="a-left auth-method-name">
                                    @item.AuthMethodName
                                </td>
                                <td class="a-left email">
                                    @item.Email
                                </td>
                                <td class="a-left external-id">
                                    @CommonHelper.EnsureMaximumLength(item.ExternalIdentifier, 40, "...")
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
                    }
                    if (Model.CompanyEnabled || Model.DisplayVatNumber)
                    {
            <div class="fieldset">
                <div class="title">
                    <strong>@T("Account.CompanyDetails")</strong>
                </div>
                <div class="form-fields">
                    @if (Model.CompanyEnabled)
                    {
                        <div class="inputs">
                            @Html.LabelFor(model => model.Company, new { }, ":")
                            @Html.EditorFor(model => model.Company)
                            @if (Model.CompanyRequired)
                            {
                                @Html.RequiredHint()
                            }
                            @Html.ValidationMessageFor(model => model.Company)
                        </div>
                    }
                    @if (Model.DisplayVatNumber)
                    {
                        <div class="inputs">
                            @Html.LabelFor(model => model.VatNumber, new { }, ":")
                            @Html.EditorFor(model => model.VatNumber)
                            <span class="vat-status">@Model.VatNumberStatusNote</span>
                            <span class="vat-note"><em>@T("Account.Fields.VatNumber.Note")</em></span>
                        </div>
                    }
                </div>
            </div>
                    }
                    if (Model.StreetAddressEnabled ||
                                Model.StreetAddress2Enabled ||
                                Model.ZipPostalCodeEnabled ||
                                Model.CityEnabled ||
                                Model.CountryEnabled)
                    {
            <div class="fieldset">
                <div class="title">
                    <strong>@T("Account.YourAddress")</strong>
                </div>
                <div class="form-fields">
                        @*rainChange 国家不显示，默认使用当前可以使用的最后一个国家*@
                        @Html.HiddenFor(model => model.CountryId,new { Value = Model.AvailableCountries.Last().Value })
                        @*<input data-val="true" data-val-number="The field 国家 must be a number." data-val-required="'Country Id' must not be empty." id="CountryId" name="CountryId" type="hidden" value="@Model.AvailableCountries.Last().Value">*@
                        @*rainChange 省市区必选*@                        
                        <div class="inputs">
                            @Html.LabelFor(model => model.StateProvinceId, new { }, ":")
                            @Html.DropDownList("StateProvinceId", Model.AvailableStates)
                            @Html.DropDownList("CityId", Model.AvailableCities)
                            @Html.DropDownList("DistrictId", Model.AvailableDistricts)
                            @Html.RequiredHint()
                            @Html.ValidationMessageFor(model => model.StateProvinceId)
                            至少需要选择省份
                            <span id="cities-loading-progress" style="display: none;" class="please-wait">@T("Common.Wait...")</span>
                        </div>
                        
                        <div class="inputs">
                            @Html.LabelFor(model => model.StreetAddress2, new { }, ":")
                            @Html.EditorFor(model => model.StreetAddress2)
                            @if (Model.StreetAddress2Required)
                            {
                                @Html.RequiredHint()
                            }
                            @Html.ValidationMessageFor(model => model.StreetAddress2)
                        </div>
                        @if(Model.ZipPostalCodeEnabled)
                        {
                            <div class="inputs">
                                @Html.LabelFor(model => model.ZipPostalCode, new { }, ":")
                                @Html.EditorFor(model => model.ZipPostalCode)
                                @if (Model.ZipPostalCodeRequired)
                                {
                                    @Html.RequiredHint()
                                }
                                @Html.ValidationMessageFor(model => model.ZipPostalCode)
                            </div>
                        }

                    </div>
            </div>            
                    }
                    if (Model.PhoneEnabled || Model.FaxEnabled)
                    {
            <div class="fieldset">
                <div class="title">
                    <strong>@T("Account.YourContactInformation")</strong>
                </div>
                <div class="form-fields">
                    @if (Model.PhoneEnabled)
                    {
                        <div class="inputs">
                            @Html.LabelFor(model => model.Phone, new { }, ":")
                            @Html.EditorFor(model => model.Phone)
                            @if (Model.PhoneRequired)
                            {
                                @Html.RequiredHint()
                            }
                            @Html.ValidationMessageFor(model => model.Phone)
                        </div>
                    }
                    @if (Model.FaxEnabled)
                    {
                        <div class="inputs">
                            @Html.LabelFor(model => model.Fax, new { }, ":")
                            @Html.EditorFor(model => model.Fax)
                            @if (Model.FaxRequired)
                            {
                                @Html.RequiredHint()
                            }
                            @Html.ValidationMessageFor(model => model.Fax)
                        </div>
                    }
                </div>
            </div>
                    }
                    if (Model.NewsletterEnabled || Model.CustomerAttributes.Count > 0)
                    {
            <div class="fieldset">
                <div class="title">
                    <strong>@T("Account.Options")</strong>
                </div>
                <div class="form-fields">
                    @if (Model.NewsletterEnabled)
                    {
                        <div class="inputs">
                            @Html.LabelFor(model => model.Newsletter, new {}, ":")
                            @Html.EditorFor(model => model.Newsletter)
                            @Html.ValidationMessageFor(model => model.Newsletter)
                        </div>
                    }
                    @if (Model.CustomerAttributes.Count > 0)
                    {
                        @Html.Partial("_CustomerAttributes", Model.CustomerAttributes)
                    }
                </div>
            </div>
                    }
                    if (Model.AllowCustomersToSetTimeZone || Model.SignatureEnabled)
                    { 
            <div class="fieldset">
                <div class="title">
                    <strong>@T("Account.Preferences")</strong>
                </div>
                <div class="form-fields">
                    @if (Model.AllowCustomersToSetTimeZone)
                    {
                        <div class="inputs">
                            @Html.LabelFor(model => model.TimeZoneId, new { }, ":")
                            @Html.DropDownList("TimeZoneId", Model.AvailableTimeZones)
                            @Html.ValidationMessageFor(model => model.TimeZoneId)
                        </div>
                    }
                    @if (Model.SignatureEnabled)
                    {             
                        <div class="inputs">
                            @Html.LabelFor(model => model.Signature, new { }, ":")
                            @Html.TextAreaFor(model => model.Signature, new { @class = "account-signature-text" })
                        </div>
                    }
                </div>
            </div>
                    }
            <div class="buttons">
                <input type="submit" value="@T("Common.Save")" name="save-info-button" class="button-1 save-customer-info-button" />
            </div>
        }
    </div>
</div>
