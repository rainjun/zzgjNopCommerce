@model AddressModel
@using Nop.Web.Models.Common;

@if (Model.CountryEnabled && Model.StateProvinceEnabled)
{
    <script type="text/javascript">
        //匹配省市区的关联
        $(function () {
            $("#@Html.FieldIdFor(model => model.StateProvinceId),#@Html.FieldIdFor(model => model.CityId)").change(function () {
                var _jself = $(this);
                var selectedItem = $(this).val();
                var ddlStates;

                if (_jself.attr("id") == "@Html.FieldIdFor(model => model.StateProvinceId)") {
                    ddlStates = $("#@Html.FieldIdFor(model => model.CityId)");
                } else {
                    ddlStates = $("#@Html.FieldIdFor(model => model.DistrictId)");
                }

                var statesProgress = $("#states-loading-progress");
                statesProgress.show();
                $.ajax({
                    cache: false,
                    type: "GET",
                    url: "@(Url.Action("GetAreaByParentId", "Country"))",
                    data: { "parentId": selectedItem, "addEmptyStateIfRequired": "true" },
                    success: function (data) {
                        ddlStates.html('');
                        $.each(data, function (id, option) {
                            ddlStates.append($('<option></option>').val(option.id).html(option.name));
                        });
                        ddlStates.val("-1").change();
                        statesProgress.hide();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve states.');
                        ddlStates.val("-1").change();
                        statesProgress.hide();
                    }
                });
            });
        });
    </script>
}
@Html.HiddenFor(model => model.Id)
<div class="edit-address">
    <div class="inputs">
        @Html.LabelFor(model => model.FirstName, new { }, ":")
        @Html.EditorFor(model => model.FirstName)
        @Html.RequiredHint()
        @Html.ValidationMessageFor(model => model.FirstName)
    </div>
    <div class="inputs">
        @Html.LabelFor(model => model.LastName, new { }, ":")
        @Html.EditorFor(model => model.LastName)
        @Html.RequiredHint()
        @Html.ValidationMessageFor(model => model.LastName)

    </div>
    <div class="inputs">
        @Html.LabelFor(model => model.Email, new { }, ":")
        @Html.EditorFor(model => model.Email)
        @Html.RequiredHint()
        @Html.ValidationMessageFor(model => model.Email)
    </div>
    @if (Model.CompanyEnabled)
    {
        <div class="inputs">
            @Html.LabelFor(model => model.Company, new { }, ":")
            @Html.EditorFor(model => model.Company)
            @if (Model.CompanyRequired)
            {
                @Html.RequiredHint()
            }
            @Html.ValidationMessageFor(model => model.Company)
        </div>
    }

@*rainChange 国家不显示，默认使用当前可以使用的最后一个国家*@
@Html.HiddenFor(model => model.CountryId,new { Value = Model.AvailableCountries.Last().Value })
    @*<input data-val="true" data-val-number="The field 国家 must be a number." data-val-required="'Country Id' must not be empty." id="CountryId" name="CountryId" type="hidden" value="@Model.AvailableCountries.Last().Value">*@
    @*rainChange 省市区必选*@
    <div class="inputs">
        @Html.LabelFor(model => model.StateProvinceId, new { }, ":")
        @Html.DropDownList("StateProvinceId", Model.AvailableStates)
        @Html.DropDownList("CityId", Model.AvailableCities)
        @Html.DropDownListFor(model => model.DistrictId, Model.AvailableDistricts)
        @Html.RequiredHint()
        @Html.ValidationMessageFor(model => model.StateProvinceId)
        至少需要选择省份
                            <span id="cities-loading-progress" style="display: none;" class="please-wait">@T("Common.Wait...")</span>
    </div>

    <div class="inputs">
        @Html.LabelFor(model => model.Address2, new { }, ":")
        @Html.EditorFor(model => model.Address2)
        @if (Model.StreetAddress2Required)
        {
            @Html.RequiredHint()
        }
        @Html.ValidationMessageFor(model => model.Address2)
    </div>
    @if (Model.ZipPostalCodeEnabled)
    {
        <div class="inputs">
            @Html.LabelFor(model => model.ZipPostalCode, new { }, ":")
            @Html.EditorFor(model => model.ZipPostalCode)
            @if (Model.ZipPostalCodeRequired)
            {
                @Html.RequiredHint()
            }
            @Html.ValidationMessageFor(model => model.ZipPostalCode)
        </div>
    }
    @if (Model.PhoneEnabled)
    {
        <div class="inputs">
            @Html.LabelFor(model => model.PhoneNumber, new { }, ":")
            @Html.EditorFor(model => model.PhoneNumber)
            @if (Model.PhoneRequired)
            {
                @Html.RequiredHint()
            }
            @Html.ValidationMessageFor(model => model.PhoneNumber)
        </div>
    }
    @if (Model.FaxEnabled)
    {
        <div class="inputs">
            @Html.LabelFor(model => model.FaxNumber, new { }, ":")
            @Html.EditorFor(model => model.FaxNumber)
            @if (Model.FaxRequired)
            {
                @Html.RequiredHint()
            }
            @Html.ValidationMessageFor(model => model.FaxNumber)
        </div>
    }
</div>
